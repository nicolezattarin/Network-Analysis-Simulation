import numpy as np
from scipy import integrate

def GaaussWeights():
    vs = [-0.0765265211334973337546404093988382110047962668134975008047952443842563420483369782415451141815562156069985056463641327044405378245712628847111887172768133849480713034639232220573314968967976578624002126908309880442644981195204905648677468155050797193996060978666309220354740163118897397462,
	0.0765265211334973337546404093988382110047962668134975008047952443842563420483369782415451141815562156069985056463641327044405378245712628847111887172768133849480713034639232220573314968967976578624002126908309880442644981195204905648677468155050797193996060978666309220354740163118897397462,
	-0.2277858511416450780804961953685746247430889376829274723146357392071713418635558277949521251909687080317737313156043021742990408764128121348527309473103510231012088770889101526899727869312951647279166230222083532237485779698033678575987234663095414012801053067685591624158148344361195752847,
	0.2277858511416450780804961953685746247430889376829274723146357392071713418635558277949521251909687080317737313156043021742990408764128121348527309473103510231012088770889101526899727869312951647279166230222083532237485779698033678575987234663095414012801053067685591624158148344361195752847,
	-0.3737060887154195606725481770249272373957463217056827118279486135156457643730595278958956836345333789447677220885281501530593501068444273954500663893598076876632116269160694032156736748270203663186845460433681971911054257380408445871617371947413964535372457387465138670353227723685242870666,
	0.3737060887154195606725481770249272373957463217056827118279486135156457643730595278958956836345333789447677220885281501530593501068444273954500663893598076876632116269160694032156736748270203663186845460433681971911054257380408445871617371947413964535372457387465138670353227723685242870666,
	-0.5108670019508270980043640509552509984254913292024268334723486198947349703907657281440316830508677791983294306884352623565652540225691147912695617386450606003834133539672964815466909956561514101091590010957544863926131866746678211741307841744076338006709425045419675774556151498035520402212,
	0.5108670019508270980043640509552509984254913292024268334723486198947349703907657281440316830508677791983294306884352623565652540225691147912695617386450606003834133539672964815466909956561514101091590010957544863926131866746678211741307841744076338006709425045419675774556151498035520402212,
	-0.6360536807265150254528366962262859367433891167993684639394466225465412625854301325587031954957613065821171093777259573620410810297092032405446994739443650537331906321586488794157012474756582161960205379517855031717327595950200970542877586428866635712964405838287500018038820406993696960313,
	0.6360536807265150254528366962262859367433891167993684639394466225465412625854301325587031954957613065821171093777259573620410810297092032405446994739443650537331906321586488794157012474756582161960205379517855031717327595950200970542877586428866635712964405838287500018038820406993696960313,
	-0.7463319064601507926143050703556415903107306795691764441395459060685353550381550646811041136206475206123849006516765614963114309728028906789375472400269214183897220068963288979058850209548743013321442485351491957120911186313909609633405415948092225881978601529357254454910055662779167650089,
	0.7463319064601507926143050703556415903107306795691764441395459060685353550381550646811041136206475206123849006516765614963114309728028906789375472400269214183897220068963288979058850209548743013321442485351491957120911186313909609633405415948092225881978601529357254454910055662779167650089,
	-0.8391169718222188233945290617015206853296293650656373732524927255328610939993248099192293405659576492206042203530691409455744267670339561156784556927871651303614757720382422461584374656765616405754841392655432820150389419609038711147956974464600816733249843930304105365594281399220263222406,
	0.8391169718222188233945290617015206853296293650656373732524927255328610939993248099192293405659576492206042203530691409455744267670339561156784556927871651303614757720382422461584374656765616405754841392655432820150389419609038711147956974464600816733249843930304105365594281399220263222406,
	-0.9122344282513259058677524412032981130491847974236917747958822191580708912087190789364447261929213873787603917546460264117368633829388364812137731072764160539290861731887984543836691517730025113125160507543614452998823427889139340036155775261652542681121293143129162250026709325798464559842,
	0.9122344282513259058677524412032981130491847974236917747958822191580708912087190789364447261929213873787603917546460264117368633829388364812137731072764160539290861731887984543836691517730025113125160507543614452998823427889139340036155775261652542681121293143129162250026709325798464559842,
	-0.9639719272779137912676661311972772219120603278061888560635375938920415807843830569800181252559647156313104349159642305288604107945950841916012896973856125442362722204039344929993138383198252917335788877307216356759417337912146196947795957049391561976704802249548893795179890457356617851265,
	0.9639719272779137912676661311972772219120603278061888560635375938920415807843830569800181252559647156313104349159642305288604107945950841916012896973856125442362722204039344929993138383198252917335788877307216356759417337912146196947795957049391561976704802249548893795179890457356617851265,
	-0.9931285991850949247861223884713202782226471309016558961481841312179847176277537808394494024965722092747289403472441901380148603873987776712384136792903672018478363391883474614446467923321455848994412127013518584596328653839755407926529209842664597749680291209275759831792849248136886138353,
	0.9931285991850949247861223884713202782226471309016558961481841312179847176277537808394494024965722092747289403472441901380148603873987776712384136792903672018478363391883474614446467923321455848994412127013518584596328653839755407926529209842664597749680291209275759831792849248136886138353]

    ws = [	0.1527533871307258506980843319550975934919486451123785972747010498175974531627377815355724878365039059354400184281378782601150279679600783005530039321842277357554019203124915100518499038184507289979208511728338097884847930234840391745787787603960313774754576020521238652300682735542710944263,
	0.1527533871307258506980843319550975934919486451123785972747010498175974531627377815355724878365039059354400184281378782601150279679600783005530039321842277357554019203124915100518499038184507289979208511728338097884847930234840391745787787603960313774754576020521238652300682735542710944263,
	0.1491729864726037467878287370019694366926799040813683164962112178098444225955867806939613260352104810517091385456733800686575677792178649430941723424667532046356472774228709560694803833239714102500755019738911703717170310002053316744710774788331941474319396315320062727688974661711619397638,
	0.1491729864726037467878287370019694366926799040813683164962112178098444225955867806939613260352104810517091385456733800686575677792178649430941723424667532046356472774228709560694803833239714102500755019738911703717170310002053316744710774788331941474319396315320062727688974661711619397638,
	0.1420961093183820513292983250671649330345154133920203033373670829838280874979343676169492242832005826013306857366620140189402437272742182737236253724487588567621276688265922710626976924994669598575042368845029007422245631263596983756760256569446985608014039758824276822804479323371308934112,
	0.1420961093183820513292983250671649330345154133920203033373670829838280874979343676169492242832005826013306857366620140189402437272742182737236253724487588567621276688265922710626976924994669598575042368845029007422245631263596983756760256569446985608014039758824276822804479323371308934112,
	0.131688638449176626898494499748163134916110511146983526996436493708854356429480933143557975183972629245105980054636247016400316830607538704952932577689132201902021181666362879795141713525128804030525410925388026264783643215389540368786522194165102288258575353624172248387510459119776031765,
	0.131688638449176626898494499748163134916110511146983526996436493708854356429480933143557975183972629245105980054636247016400316830607538704952932577689132201902021181666362879795141713525128804030525410925388026264783643215389540368786522194165102288258575353624172248387510459119776031765,
	0.1181945319615184173123773777113822870050412195489687754468899520201747483505115163057286878258190174460626754309231659133886817937422099122542309757118513383856290919785688442004649951483215887378851802439188486330757698272816855138495620519895987774292383111032264708641859679188600095692,
	0.1181945319615184173123773777113822870050412195489687754468899520201747483505115163057286878258190174460626754309231659133886817937422099122542309757118513383856290919785688442004649951483215887378851802439188486330757698272816855138495620519895987774292383111032264708641859679188600095692,
	0.1019301198172404350367501354803498761666916560233925562619716161968523220253943464753493157694798582137585903552548326593234407721971982947468111885795226965581584345480416762264760609122842382150145830070657006817955059316458539298252170005077219224922112385771403739725657450818783267313,
	0.1019301198172404350367501354803498761666916560233925562619716161968523220253943464753493157694798582137585903552548326593234407721971982947468111885795226965581584345480416762264760609122842382150145830070657006817955059316458539298252170005077219224922112385771403739725657450818783267313,
	0.0832767415767047487247581432220462061001778285831632907448820607856930828940794194713751908437908393490961161119327637705991492770889027822910222187699193186160700364391275137979683413090460002469936166941844144330159650771507260085403067307251888321939680464514855705930284166808865996089,
	0.0832767415767047487247581432220462061001778285831632907448820607856930828940794194713751908437908393490961161119327637705991492770889027822910222187699193186160700364391275137979683413090460002469936166941844144330159650771507260085403067307251888321939680464514855705930284166808865996089,
	0.0626720483341090635695065351870416063516010765784363640995843454379748110336656786445637660568322035126032533995920732617572100906357057485305643635379372052174565132880956643096197824783282502822044536246229255150791963516814947223936297508668215819063938781024256991067440283222516531374,
	0.0626720483341090635695065351870416063516010765784363640995843454379748110336656786445637660568322035126032533995920732617572100906357057485305643635379372052174565132880956643096197824783282502822044536246229255150791963516814947223936297508668215819063938781024256991067440283222516531374,
	0.0406014298003869413310399522749321098790906399899515368176068545618322967509873282955389206230443849761898257096750750226100388420589263242455270189562763042394217695623102760213193663915194028524305033283414664156073509698450908818586062170756508088247402639869134213644998336627334563899,
	0.0406014298003869413310399522749321098790906399899515368176068545618322967509873282955389206230443849761898257096750750226100388420589263242455270189562763042394217695623102760213193663915194028524305033283414664156073509698450908818586062170756508088247402639869134213644998336627334563899,
	0.017614007139152118311861962351852816362143105543336732524349326677348419259621847817403105542146097668703716227512570008208322919217356715608110009655621137928066105955538408464981760593482616529445662145250737154216181476956539350020274158495991703186071698688078395432051877120218676412,
	0.017614007139152118311861962351852816362143105543336732524349326677348419259621847817403105542146097668703716227512570008208322919217356715608110009655621137928066105955538408464981760593482616529445662145250737154216181476956539350020274158495991703186071698688078395432051877120218676412]
    return ws, vs

def Quad(f, a, b, args):
    w, xs = GaaussWeights()
    w = np.array(w)
    xs = np.array(xs)
    xs = ((b-a)*xs + a+b)/2
    w = (b-a)/2*w
    int = 0
    for ww, xx in zip(w, xs):
        int+=f(xx, *args)*ww
    return int

def GaussQuad(f, sigma, args):
    w, xs = GaaussWeights()
    w = np.array(w)
    xs = np.array(xs)
    w = w/np.sqrt(np.pi)
    xs = xs*sigma*np.sqrt(2)
    int = 0
    for ww, xx in zip(w, xs):
        int+=f(xx, *args)*ww
    return int

def gauss(r, sigma):
    return 1/(sigma*np.sqrt(2*np.pi))*np.exp(-r**2/(2*sigma**2))

def GQR_packet_radio (r0, R, SIR_threshold, inter_density, sigma, eta=4):
    SIR_threshold = 0.1*np.log(10)*SIR_threshold
    sigma = 0.1*np.log(10)*sigma

    def Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta): 
        def func_r (r, xi, r0, xi_0, SIR_threshold, sigma, R, eta):#only r is var, all the rest is arg
            f = gauss(xi, sigma)*(2*r/R**2)*(1-1/(1+SIR_threshold*np.exp(xi_0-xi)*(r/r0)**-eta))
            return f
        args = (xi, r0, xi_0, SIR_threshold, sigma, R, eta)
        int = Quad(func_r, 0, R, args)
        return int
    
    def Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta): 
        def func_xi(xi, r0, xi_0, SIR_threshold, sigma, R, eta):
            f = Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta)
            return f
        args = (r0, xi_0, SIR_threshold, sigma, R, eta)
        int = GaussQuad(func_xi, sigma, args)
        return int
    
    def Integral_xi0(r0, SIR_threshold, inter_density, sigma, R, eta): 
        def func_xi0(xi_0, r0, SIR_threshold, inter_density, sigma, R, eta):
            f = np.exp(-inter_density*np.pi*R**2*(1-Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta)))
            return f
        args = (r0, SIR_threshold, inter_density, sigma, R, eta)
        int = GaussQuad(func_xi0, sigma, args)
        return int
    
    Ps = Integral_xi0(r0, SIR_threshold, inter_density, sigma, R, eta)
    r = {'success_prob': Ps, 'failure_prob': 1-Ps}
    return r

def GQR_cellular_system (r0, R, SIR_threshold, alpha, sigma, eta, R1, R2):
    # SIR_threshold = 0.1*np.log(10)*SIR_threshold
    # sigma = 0.1*np.log(10)*sigma
    SIR_threshold = 10**(SIR_threshold*0.1)
    sigma = 10**(sigma*0.1)

    def Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2):
        def func_r (r, xi, r0, xi_0, SIR_threshold, sigma, R, eta):#only r is var, all the rest is arg
            f = gauss(xi, sigma)*(2*r/R**2)*(1-1/(1+SIR_threshold*np.exp(xi_0-xi)*(r/r0)**-eta))
            return f
        args = (xi, r0, xi_0, SIR_threshold, sigma, R, eta)
        int = Quad(func_r, R1, R2, args)
        return int
    
    def Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2): 
        def func_xi(xi, r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2):
            f = Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2)
            return f
        args = (r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2)
        int = GaussQuad(func_xi, sigma, args)
        return int
    
    def Integral_xi0(r0, SIR_threshold, alpha, sigma, R, eta, R1, R2): 
        def func_xi0(xi_0, r0, SIR_threshold, alpha, sigma, R, eta, R1, R2):
            f = (1-alpha+alpha*Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta, R1, R2))**6
            return f
        args = (r0, SIR_threshold, alpha, sigma, R, eta, R1, R2)
        int = GaussQuad(func_xi0, sigma, args)
        return int
    
    def Integral_r0(SIR_threshold, alpha, sigma, R, eta, R1, R2): 
        def func_r0(r0, SIR_threshold, alpha, sigma, R, eta, R1, R2):
            f = (2*r0/R**2)*Integral_xi0(r0, SIR_threshold, alpha, sigma, R, eta, R1, R2)
            return f
        args = (SIR_threshold, alpha, sigma, R, eta, R1, R2)
        int = Quad(func_r0, 0, R, args)
        return int
    
    Ps = Integral_r0(SIR_threshold, alpha, sigma, R, eta, R1, R2)
    r = {'success_prob': Ps, 'failure_prob': 1-Ps}
    return r

def GQRmulti_access (r0, R, SIR_threshold, G, sigma, eta=4):
    SIR_threshold = 0.1*np.log(10)*SIR_threshold
    sigma = 0.1*np.log(10)*sigma

    def Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta): 
        def func_r (r, xi, r0, xi_0, SIR_threshold, sigma, R, eta):#only r is var, all the rest is arg
            f = gauss(xi, sigma)*(2*r/R**2)*(1-1/(1+SIR_threshold*np.exp(xi_0-xi)*(r/r0)**-eta))
            return f
        args = (xi, r0, xi_0, SIR_threshold, sigma, R, eta)
        int = Quad(func_r, 0, R, args)
        return int
    
    def Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta): 
        def func_xi(xi, r0, xi_0, SIR_threshold, sigma, R, eta):
            f = Integral_r(xi, r0, xi_0, SIR_threshold, sigma, R, eta)
            return f
        args = (r0, xi_0, SIR_threshold, sigma, R, eta)
        int = GaussQuad(func_xi, sigma, args)
        return int
    
    def Integral_xi0(r0, SIR_threshold, G, sigma, R, eta): 
        def func_xi0(xi_0, r0, SIR_threshold, G, sigma, R, eta):
            f = G*np.exp(-G*(1-Integral_xi(r0, xi_0, SIR_threshold, sigma, R, eta)))
            return f
        args = (r0, SIR_threshold, G, sigma, R, eta)
        int = GaussQuad(func_xi0, sigma, args)
        return int

    def Integral_r0(SIR_threshold, G, sigma, R, eta): 
        def func_r0(r0, SIR_threshold, G, sigma, R, eta):
            f = (2*r0/R**2)*Integral_xi0(r0, SIR_threshold, G, sigma, R, eta)
            return f
        args = (SIR_threshold, G, sigma, R, eta)
        int = Quad(func_r0, 0, 1, args)
        return int
    
    Ps = Integral_r0(SIR_threshold, G, sigma, R, eta)
    r = {'success_prob': Ps, 'failure_prob': 1-Ps}
    return r
